dependencies {
    // Locked these versions together as it makes sense
    implementation("io.atomix.copycat:copycat-client:${properties["copycat_version"]}")
    implementation("io.atomix.copycat:copycat-server:${properties["copycat_version"]}")
    implementation("io.atomix.copycat:copycat-server:${properties["copycat_version"]}")
    implementation("org.hibernate:hibernate-core:${properties["hibernate_version"]}")
    implementation("io.dropwizard.metrics:metrics-jmx:${properties["metrics_version"]}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${properties["kotlinVersion"]}")
    implementation("com.google.guava:guava:${properties["guavaVersion"]}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${properties["kotlinVersion"]}")
    implementation("javax.persistence:javax.persistence-api:${properties["persistence-api_version"]}")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:${properties["log4j_version"]}")
    implementation("org.apache.logging.log4j:log4j-web:${properties["log4j_version"]}")
    implementation("com.github.ben-manes.caffeine:caffeine:${properties["caffeine_version"]}")
    implementation("co.paralleluniverse:quasar-core:${properties["quasarVersion11"]}")
    implementation("io.reactivex:rxjava:${properties["rxjava_version"]}")
    implementation("org.apache.activemq:artemis-core-client:${properties["artemis_version"]}")
    implementation("org.apache.activemq:artemis-server:${properties["artemis_version"]}")
    implementation("org.apache.activemq:artemis-amqp-protocol:${properties["artemis_version"]}")
    implementation("org.apache.commons:commons-lang3:${properties["commons_lang_version"]}")
    implementation("org.bouncycastle:bcprov-jdk15on:${properties["bouncycastleVersion"]}")
    implementation("org.bouncycastle:bcpkix-jdk15on:${properties["bouncycastleVersion"]}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${properties["jackson_version"]}")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${properties["jackson_version"]}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${properties["jackson_version"]}")
    implementation("com.typesafe:config:${properties["typesafe_config_version"]}")
    implementation("org.liquibase:liquibase-core:${properties["liquibase_version"]}")
    implementation("org.apache.shiro:shiro-core:${properties["shiro_version"]}")
    implementation("io.github.classgraph:classgraph:${properties["classgraphVersion"]}")
    implementation("org.jolokia:jolokia-jvm:${properties["jolokia_version"]}:agent")
    implementation("info.picocli:picocli:${properties["picocli_version"]}")
    implementation("com.zaxxer:HikariCP:${properties["hikari_version"]}")
    implementation("org.crashub:crash.shell:${properties["crash_version"]}")
    implementation("org.crashub:crash.connectors.ssh:${properties["crash_version"]}")
    implementation("com.h2database:h2:${properties["h2_version"]}")
    implementation("com.palominolabs.metrics:metrics-new-relic:${properties["metrics_new_relic_version"]}")
    implementation("com.jcabi:jcabi-manifests:${properties["jcabi_manifests_version"]}")
    implementation("org.slf4j:jul-to-slf4j:${properties["slf4j_version"]}")
    implementation("org.fusesource.jansi:jansi:${properties["jansi_version"]}")
    implementation("com.squareup.okhttp3:okhttp:${properties["okhttp_version"]}")
    implementation("com.github.bft-smart:library:${properties["bft_smart_version"]}")
    implementation("io.atomix.catalyst:catalyst-netty:${properties["catalyst_version"]}")
    implementation("com.lmax:disruptor:${properties["disruptor_version"]}")

    implementation(project(":client:jackson"))
    implementation(project(":client:rpc"))
    implementation(project(":confidential-identities"))
    implementation(project(":common:configuration-parsing"))
    implementation(project(":common:logging"))
    implementation(project(":common:validation"))
    implementation(project(":core"))
    implementation(project(":core-deterministic"))
    implementation(project(":serialization"))
    implementation(project(":serialization-deterministic"))
    implementation(project(":serialization-djvm"))
    implementation(project(":serialization-djvm:deserializers"))
    implementation(project(":node:djvm"))
    implementation(project(":node-api"))
    implementation(project(":tools:cliutils"))
    implementation(project(":tools:shell"))

    // Sandbox for deterministic contract verification
    implementation("net.corda.djvm:corda-djvm:${properties["djvm_version"]}")

    testImplementation("com.nhaarman:mockito-kotlin:${properties["mockito_kotlin_version"]}")
    testImplementation("com.google.jimfs:jimfs:${properties["jimfs_version"]}")
    testImplementation("org.jetbrains.kotlin:kotlin-test:${properties["kotlinVersion"]}")
    testImplementation("org.assertj:assertj-core:${properties["assertj_version"]}")
    testImplementation("junit:junit:${properties["junit_version"]}")

    testImplementation(project(":core-test-utils"))
    testImplementation(project(":finance:contracts"))
    testImplementation(project(":finance:workflows"))
    testImplementation(project(":test-utils"))
}
